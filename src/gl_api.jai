
GL_BLEND_EQUATION_RGB             :: 0x8009;
GL_VERTEX_ATTRIB_ARRAY_ENABLED    :: 0x8622;
GL_VERTEX_ATTRIB_ARRAY_SIZE       :: 0x8623;
GL_VERTEX_ATTRIB_ARRAY_STRIDE     :: 0x8624;
GL_VERTEX_ATTRIB_ARRAY_TYPE       :: 0x8625;
GL_VERTEX_PROGRAM_POINT_SIZE      :: 0x8642;
GL_VERTEX_ATTRIB_ARRAY_POINTER    :: 0x8645;
GL_STENCIL_BACK_FUNC              :: 0x8800;
GL_STENCIL_BACK_FAIL              :: 0x8801;
GL_STENCIL_BACK_PASS_DEPTH_FAIL   :: 0x8802;
GL_STENCIL_BACK_PASS_DEPTH_PASS   :: 0x8803;
GL_MAX_DRAW_BUFFERS               :: 0x8824;
GL_DRAW_BUFFER0                   :: 0x8825;
GL_DRAW_BUFFER1                   :: 0x8826;
GL_DRAW_BUFFER2                   :: 0x8827;
GL_DRAW_BUFFER3                   :: 0x8828;
GL_DRAW_BUFFER4                   :: 0x8829;
GL_DRAW_BUFFER5                   :: 0x882A;
GL_DRAW_BUFFER6                   :: 0x882B;
GL_DRAW_BUFFER7                   :: 0x882C;
GL_DRAW_BUFFER8                   :: 0x882D;
GL_DRAW_BUFFER9                   :: 0x882E;
GL_DRAW_BUFFER10                  :: 0x882F;
GL_DRAW_BUFFER11                  :: 0x8830;
GL_DRAW_BUFFER12                  :: 0x8831;
GL_DRAW_BUFFER13                  :: 0x8832;
GL_DRAW_BUFFER14                  :: 0x8833;
GL_DRAW_BUFFER15                  :: 0x8834;
GL_BLEND_EQUATION_ALPHA           :: 0x883D;
GL_MAX_VERTEX_ATTRIBS             :: 0x8869;
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED :: 0x886A;
GL_MAX_TEXTURE_IMAGE_UNITS        :: 0x8872;
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS :: 0x8B49;
GL_MAX_VERTEX_UNIFORM_COMPONENTS  :: 0x8B4A;
GL_MAX_VARYING_FLOATS             :: 0x8B4B;
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS :: 0x8B4C;
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS :: 0x8B4D;
GL_SHADER_TYPE                    :: 0x8B4F;
GL_FLOAT_VEC2                     :: 0x8B50;
GL_FLOAT_VEC3                     :: 0x8B51;
GL_FLOAT_VEC4                     :: 0x8B52;
GL_INT_VEC2                       :: 0x8B53;
GL_INT_VEC3                       :: 0x8B54;
GL_INT_VEC4                       :: 0x8B55;
GL_BOOL                           :: 0x8B56;
GL_BOOL_VEC2                      :: 0x8B57;
GL_BOOL_VEC3                      :: 0x8B58;
GL_BOOL_VEC4                      :: 0x8B59;
GL_FLOAT_MAT2                     :: 0x8B5A;
GL_FLOAT_MAT3                     :: 0x8B5B;
GL_FLOAT_MAT4                     :: 0x8B5C;
GL_SAMPLER_1D                     :: 0x8B5D;
GL_SAMPLER_2D                     :: 0x8B5E;
GL_SAMPLER_3D                     :: 0x8B5F;
GL_SAMPLER_CUBE                   :: 0x8B60;
GL_SAMPLER_1D_SHADOW              :: 0x8B61;
GL_SAMPLER_2D_SHADOW              :: 0x8B62;
GL_DELETE_STATUS                  :: 0x8B80;
GL_COMPILE_STATUS                 :: 0x8B81;
GL_LINK_STATUS                    :: 0x8B82;
GL_VALIDATE_STATUS                :: 0x8B83;
GL_INFO_LOG_LENGTH                :: 0x8B84;
GL_ATTACHED_SHADERS               :: 0x8B85;
GL_ACTIVE_UNIFORMS                :: 0x8B86;
GL_ACTIVE_UNIFORM_MAX_LENGTH      :: 0x8B87;
GL_SHADER_SOURCE_LENGTH           :: 0x8B88;
GL_ACTIVE_ATTRIBUTES              :: 0x8B89;
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    :: 0x8B8A;
GL_FRAGMENT_SHADER_DERIVATIVE_HINT :: 0x8B8B;
GL_SHADING_LANGUAGE_VERSION       :: 0x8B8C;
GL_CURRENT_PROGRAM                :: 0x8B8D;
GL_POINT_SPRITE_COORD_ORIGIN      :: 0x8CA0;
GL_LOWER_LEFT                     :: 0x8CA1;
GL_UPPER_LEFT                     :: 0x8CA2;
GL_STENCIL_BACK_REF               :: 0x8CA3;
GL_STENCIL_BACK_VALUE_MASK        :: 0x8CA4;
GL_STENCIL_BACK_WRITEMASK         :: 0x8CA5;
GL_VERTEX_PROGRAM_TWO_SIDE        :: 0x8643;
GL_POINT_SPRITE                   :: 0x8861;
GL_COORD_REPLACE                  :: 0x8862;
GL_MAX_TEXTURE_COORDS             :: 0x8871;

GL_RGB16F                         :: 0x881B;

GL_COLOR_ATTACHMENT1              :: 0x8CE1;
GL_COLOR_ATTACHMENT2              :: 0x8CE2;
GL_COLOR_ATTACHMENT3              :: 0x8CE3;
GL_COLOR_ATTACHMENT4              :: 0x8CE4;
GL_COLOR_ATTACHMENT5              :: 0x8CE5;
GL_COLOR_ATTACHMENT6              :: 0x8CE6;
GL_COLOR_ATTACHMENT7              :: 0x8CE7;
GL_COLOR_ATTACHMENT8              :: 0x8CE8;
GL_COLOR_ATTACHMENT9              :: 0x8CE9;
GL_COLOR_ATTACHMENT10             :: 0x8CEA;
GL_COLOR_ATTACHMENT11             :: 0x8CEB;
GL_COLOR_ATTACHMENT12             :: 0x8CEC;
GL_COLOR_ATTACHMENT13             :: 0x8CED;
GL_COLOR_ATTACHMENT14             :: 0x8CEE;
GL_COLOR_ATTACHMENT15             :: 0x8CEF;
GL_COLOR_ATTACHMENT16             :: 0x8CF0;
GL_COLOR_ATTACHMENT17             :: 0x8CF1;
GL_COLOR_ATTACHMENT18             :: 0x8CF2;
GL_COLOR_ATTACHMENT19             :: 0x8CF3;
GL_COLOR_ATTACHMENT20             :: 0x8CF4;
GL_COLOR_ATTACHMENT21             :: 0x8CF5;
GL_COLOR_ATTACHMENT22             :: 0x8CF6;
GL_COLOR_ATTACHMENT23             :: 0x8CF7;
GL_COLOR_ATTACHMENT24             :: 0x8CF8;
GL_COLOR_ATTACHMENT25             :: 0x8CF9;
GL_COLOR_ATTACHMENT26             :: 0x8CFA;
GL_COLOR_ATTACHMENT27             :: 0x8CFB;
GL_COLOR_ATTACHMENT28             :: 0x8CFC;
GL_COLOR_ATTACHMENT29             :: 0x8CFD;
GL_COLOR_ATTACHMENT30             :: 0x8CFE;
GL_COLOR_ATTACHMENT31             :: 0x8CFF;

GL_FRAMEBUFFER_BINDING            :: 0x8CA6;
GL_DRAW_FRAMEBUFFER_BINDING       :: 0x8CA6;
GL_RENDERBUFFER_BINDING           :: 0x8CA7;
GL_READ_FRAMEBUFFER               :: 0x8CA8;
GL_DRAW_FRAMEBUFFER               :: 0x8CA9;
GL_READ_FRAMEBUFFER_BINDING       :: 0x8CAA;
GL_RENDERBUFFER_SAMPLES           :: 0x8CAB;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD0;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD2;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD3;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4;
GL_FRAMEBUFFER_COMPLETE           :: 0x8CD5;
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD6;
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD7;
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER :: 0x8CDB;
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER :: 0x8CDC;
GL_FRAMEBUFFER_UNSUPPORTED        :: 0x8CDD;

GL_READ_ONLY                     :: 0x88B8;
GL_WRITE_ONLY                    :: 0x88B9;
GL_READ_WRITE                    :: 0x88BA;

GL_RED                           :: 0x1903;
GL_R32UI                         :: 0x8236;
GL_RED_INTEGER                   :: 0x8D94;
GL_RGBA32UI                      :: 0x8D70;
GL_RGBA_INTEGER                  :: 0x8D99;
GL_UNSIGNED_INT_8_8_8_8          :: 0x8035;
GL_RGB32F                        :: 0x8815;
GL_R16F                          :: 0x822D;
GL_R32F                          :: 0x822E;
GL_RG16F                         :: 0x822F;
GL_RG32F                         :: 0x8230;
GL_RG                            :: 0x8227;
GL_RG_INTEGER                    :: 0x8228;

GL_POINTS                        :: 0x0000;
GL_LINES                         :: 0x0001;

GL_3_0_API :: struct {
    glGenFramebuffers: (n: GLsizei, framebuffers: *GLuint) #foreign;
    glDeleteFramebuffers: (n: GLsizei, framebuffers: *GLuint) #foreign;
    glBindFramebuffer: (target: GLenum, framebuffer: GLuint) #foreign;
    glFramebufferTexture2D: (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
    glFramebufferRenderbuffer: (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #foreign;

    glDrawBuffers: (n: GLsizei, bufs: *GLenum) #foreign;

    glGenRenderbuffers: (n: GLsizei, renderbuffers: *GLuint) #foreign;
    glDeleteRenderbuffers: (n: GLsizei, renderbuffers: *GLuint) #foreign;
    glBindRenderbuffer: (target: GLenum, renderbuffer: GLuint) #foreign;
    glRenderbufferStorage: (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
    glCheckFramebufferStatus: (target: GLenum) -> GLenum #foreign;

    glActiveTexture: (texture: GLenum) #foreign;

    glCreateProgram: () -> GLuint #foreign;
    glDeleteProgram: (program: GLuint) #foreign;
    glCreateShader: (type: GLenum) -> GLuint #foreign;
    glDeleteShader: (shader: GLuint) #foreign;
    glAttachShader: (program: GLuint, shader: GLuint) #foreign;
    glDetachShader: (program: GLuint, shader: GLuint) #foreign;
    glCompileShader: (shader: GLuint) #foreign;
    glLinkProgram: (program: GLuint) #foreign;
    glShaderSource: (shader: GLuint, count: GLsizei, c_string: **GLchar, length: *GLint) #foreign;
    glUseProgram: (program: GLuint) #foreign;

    glGetShaderiv: (shader: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetShaderInfoLog: (shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #foreign;
    glGetProgramiv: (program: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetProgramInfoLog: (program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #foreign;

    glUniform1f: (location: GLint, v0: GLfloat) #foreign;
    glUniform2f: (location: GLint, v0: GLfloat, v1: GLfloat) #foreign;
    glUniform3f: (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #foreign;
    glUniform4f: (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #foreign;
    glUniform1i: (location: GLint, v0: GLint) #foreign;
    glUniform2i: (location: GLint, v0: GLint, v1: GLint) #foreign;
    glUniform3i: (location: GLint, v0: GLint, v1: GLint, v2: GLint) #foreign;
    glUniform4i: (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #foreign;

    glUniform1fv: (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glUniform2fv: (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glUniform3fv: (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glUniform4fv: (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glUniform1iv: (location: GLint, count: GLsizei, value: *GLint) #foreign;
    glUniform2iv: (location: GLint, count: GLsizei, value: *GLint) #foreign;
    glUniform3iv: (location: GLint, count: GLsizei, value: *GLint) #foreign;
    glUniform4iv: (location: GLint, count: GLsizei, value: *GLint) #foreign;
    glUniformMatrix2fv: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glUniformMatrix3fv: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glUniformMatrix4fv: (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;

    glGetUniformLocation: (program: GLuint, name: *GLchar) -> GLint #foreign;
    glGetUniformfv: (program: GLuint, location: GLint, params: *GLfloat) #foreign;
    glGetUniformiv: (program: GLuint, location: GLint, params: *GLint) #foreign;
    glGetActiveUniform: (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) #foreign;

    glBindBuffer: (target: GLenum, buffer: GLuint) #foreign;
    glDeleteBuffers: (n: GLsizei, buffers: *GLuint) #foreign;
    glGenBuffers: (n: GLsizei, buffers: *GLuint) #foreign;
    glIsBuffer: (buffer: GLuint) -> GLboolean #foreign;
    glBufferData: (target: GLenum, size: GLsizeiptr, data: *void, usage: GLenum) #foreign;
    glBufferSubData: (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
    glGetBufferSubData: (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;

    glDisableVertexAttribArray: (index: GLuint) #foreign;
    glEnableVertexAttribArray: (index: GLuint) #foreign;

    glVertexAttribPointer: (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) #foreign;
    glVertexAttribIPointer: (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;

    glGenVertexArrays: (n: GLsizei, arrays: *GLuint) #foreign;
    glDeleteVertexArrays: (n: GLsizei, arrays: *GLuint) #foreign;
    glBindVertexArray: (array: GLuint) #foreign;

    glDebugMessageCallback: (callback: GLDEBUGPROC, userParam: *void) #foreign;

    glDeleteTextures: (n: GLsizei, textures: *GLuint) #foreign;

    glVertexAttrib3f: (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
    // glGetnTexImage: (target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #foreign;

    glMapBuffer: (target: GLenum, access: GLenum) -> *void #foreign;
    glUnmapBuffer: (target: GLenum) -> GLboolean #foreign;
}

#if OS_WINDOWS {
    GL :: #foreign_system_library "opengl32";
} else {
    GL :: #foreign_system_library "GL";
}

glCullFace :: (mode: GLenum) #foreign GL;
glGetTexImage :: (target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign GL;
glPointSize :: (size: GLfloat) #foreign GL;
glReadBuffer: (mode: GLenum) #foreign GL;
glReadPixels: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, data: *GLvoid) #foreign GL;

glGetUniformLocation :: (program: GLuint, name: string) -> GLint {
    using gl_30_api;
    c_name := to_c_string(name);
    ret := glGetUniformLocation(program, c_name);
    free(c_name);
    return ret;
}

GLDEBUGPROC :: #type (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *u8, userParam: *void) #c_callback;

gl_30_api: GL_3_0_API;