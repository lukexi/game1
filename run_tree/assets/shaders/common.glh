
uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

struct Material {
    vec3 diffuse;
    float roughness;
    float metallic;
};

// match Light in renderer.jai
struct Light {
    int is_directional;
    vec3 position; // if this is a directional light, position is the direction the light is heading
    vec3 radiance_color;
    float radius;

    int use_shadow_cubemap;
    samplerCube shadow_cube_map;

    int use_csm_shadow_map;
    sampler2D csm_shadow_map;

    mat4 csm_matrices[4];
    float csm_parts[4];

    // @TODO we probably want information on things like spherical lights and area lights
};


vec3 schlick_fresnel(vec3 F0, float v_dot_h) {
    return F0 + (1.0 - F0) * pow(2, ((-5.55473 * v_dot_h)-6.98316) * v_dot_h);
}


#define PI 3.14159265358979323846264338327950288
float distrubtion_ggx(float n_dot_h, float a) {
    float a2 = a*a;
    float factor = (n_dot_h*n_dot_h)*(a2 - 1) + 1;
    float denom = PI * factor*factor;
    return a2 / denom;
}

float geometric_ggx_sub(float n_dot_v, float k) {
    float denom = n_dot_v * (1 - k) + k;
    return n_dot_v / denom;
}

float geometric_ggx(float n_dot_l, float n_dot_v, float Roughness) {
    float r = Roughness + 1;
    float k = (r * r) / 8;
    return geometric_ggx_sub(n_dot_l, k) * geometric_ggx_sub(n_dot_v, k);
}

vec3 microfacet_brdf(vec3 N, vec3 L, vec3 H, vec3 V, float Roughness, vec3 F0) {
    float n_dot_v = max(0.0, dot(N, V));
    float n_dot_l = max(0.0, dot(N, L));
    float v_dot_h = max(0.0, dot(V, H));
    float n_dot_h = max(0.0, dot(N, H));

    vec3 numer = distrubtion_ggx(n_dot_h, Roughness) *
                    schlick_fresnel(F0, v_dot_h) *
                    geometric_ggx(n_dot_l, n_dot_v, Roughness);
    float denom = 4 * n_dot_l * n_dot_v;
    return numer / max(denom, 0.001);
}

float saturate(float value) {
    return clamp(value, 0.0, 1.0);
}